{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5ee96104",
   "metadata": {},
   "source": [
    "# Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "832206f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time/minutes</th>\n",
       "      <th>Number of Ambulances</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>75</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>90</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>105</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>135</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>165</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>180</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Time/minutes  Number of Ambulances\n",
       "0             15                     3\n",
       "1             30                     2\n",
       "2             45                     0\n",
       "3             60                     2\n",
       "4             75                     1\n",
       "5             90                     2\n",
       "6            105                     2\n",
       "7            120                     0\n",
       "8            135                     0\n",
       "9            150                     1\n",
       "10           165                     2\n",
       "11           180                     1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "#imports library to import csv file\n",
    "ambulances = \"CS LBA Data Collection Nov 3, 2021.csv\"\n",
    "#displays number of ambulances observed with 15 minute intervals \n",
    "#between 3pm and 6pm\n",
    "df = pd.read_csv(ambulances)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb114829",
   "metadata": {},
   "source": [
    "I collected the following data on the number of ambulanaces leaving a hospital myself."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b544959b",
   "metadata": {},
   "source": [
    "# Descriptive Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9f0c743b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean number of ambulances dispatched between 3pm to 6pm: 1.3\n",
      "The median number of ambulances dispatched between 3pm to 6pm: 1.5\n",
      "The mode number of ambulances dispatched between 3pm to 6pm: 3\n",
      "The range of ambulances dispatched between 3pm to 6pm: 3\n",
      "The standard deviation of ambulances dispatched between 3pm to 6pm: 0.94\n"
     ]
    }
   ],
   "source": [
    "def my_mean(x):\n",
    "    # Adds all the data points\n",
    "    sum_of_data = sum(x)\n",
    "    no_of_trials = len(x)\n",
    "    mean = sum_of_data/no_of_trials\n",
    "    print(\"The mean number of ambulances dispatched between 3pm to 6pm:\", round(mean,1))\n",
    "my_mean(df[\"Number of Ambulances\"])\n",
    "          \n",
    "def my_median(x):\n",
    "    n = len(x)\n",
    "    # makes a new list with sorted data in ascending order\n",
    "    new_list = sorted(x)\n",
    "    # check if number of data points are odd and then find the median for it\n",
    "    if n % 2:\n",
    "        median = new_list[n//2]\n",
    "        print(\"The median number of ambulances dispatched between 3pm to 6pm:\",median)\n",
    "    # median for even number of data points\n",
    "    else:\n",
    "        # used floor division to see divisibilty by 2\n",
    "        median_1 = new_list[n//2]\n",
    "        median_2 = new_list[n//2 - 1]\n",
    "        median = (median_1 + median_2)/2\n",
    "        print(\"The median number of ambulances dispatched between 3pm to 6pm:\"\n",
    "              ,median)\n",
    "        \n",
    "my_median(df[\"Number of Ambulances\"])\n",
    "\n",
    "def my_mode(x):\n",
    "    # finds the maximum time ambulances were dispatched within a time interval\n",
    "    max_ambulances = max(x)\n",
    "    print(\"The mode number of ambulances dispatched between 3pm to 6pm:\"\n",
    "          ,max_ambulances)\n",
    "my_mode(df[\"Number of Ambulances\"])\n",
    "\n",
    "def my_range(x):\n",
    "    max_ambulances = max(x)\n",
    "    min_ambulances = min(x)\n",
    "    # measures the differnce between maximum and minimum \n",
    "    #number of ambulances dispatched\n",
    "    range = max_ambulances - min_ambulances\n",
    "    print(\"The range of ambulances\",\n",
    "          \"dispatched between 3pm to 6pm:\", \n",
    "          range)\n",
    "my_range(df[\"Number of Ambulances\"])\n",
    "\n",
    "def std_dev(x):\n",
    "    n = len(x)\n",
    "    # deviation of the number of dispatched ambulances \n",
    "    #from the mean\n",
    "    sumofsquares = 0\n",
    "    for i in range(n):\n",
    "        sumofsquares += (x[i]- sum(x)/n)**2\n",
    "    print(\"The standard deviation of ambulances\",\n",
    "          \"dispatched between 3pm to 6pm:\", \n",
    "          round((sumofsquares/n)**0.5, 2))\n",
    "std_dev(df[\"Number of Ambulances\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc286ddb",
   "metadata": {},
   "source": [
    "# Histograms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f3a20ee4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "time = df[\"Time/minutes\"] \n",
    "ambulances = df[\"Number of Ambulances\"]\n",
    "plt.hist(ambulances, color = \"teal\", alpha = 0.4, \n",
    "         edgecolor = \"black\", linewidth = 3, width = 0.3)\n",
    "plt.xlabel(\"Number of Ambulances\",fontsize = 15)\n",
    "plt.ylabel(\"Frequency\",fontsize = 15)\n",
    "plt.title(\"Histogram of Ambulances dispatched between 3pm and 6pm\", \n",
    "          fontsize=15)\n",
    "plt.show()\n",
    "\n",
    "plt.bar(time, ambulances, color ='coral', alpha=0.4, width = 10, \n",
    "        edgecolor = \"black\", linewidth = 4)\n",
    "plt.xlabel(\"Time/minutes\",fontsize = 15)\n",
    "plt.ylabel(\"Number of Ambulances\",fontsize = 15)\n",
    "plt.title(\"Bar chart of Ambulances dispatched between 3pm and 6pm\" \n",
    "          ,fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d1ec4ac",
   "metadata": {},
   "source": [
    "#  Matching Napkins Simulation\n",
    "\n",
    "What is the probability that you are unlucky, and sadly NONE of the napkins are matched to the correct measurement (you guessed all of them wrong)? **Write a simulation in Python to estimate this probability**. Ensure that your code has sufficiently detailed comments to explain the key steps in the solution. **Note**: *Use your own data for this simulation*. So, if there are repeated values in your measurements, take that into consideration: what if two napkins for two distinct measurements show the same value, and are then swapped? Would those napkins be considered a mismatch, or a lucky match? It’s up to you to decide how to run the simulation as long as you clearly explain your approach. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "38d8a52d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probability of no napkins matching is 0.378\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "# napkins = number of napkins in the list\n",
    "# trials = number of times I tried to arrange them\n",
    "def no_napkins(napkins, trials):\n",
    "    # keeps track of the number of times the list of napkins dont match\n",
    "    no_match = 0\n",
    "    n = len(napkins)\n",
    "    # makes the list of napkins random\n",
    "    for i in range(trials):\n",
    "        # choses an item randomly from the list of napkins, for n times\n",
    "        # replace attribute return the item to the original list, \n",
    "        #where the item can be chosen again\n",
    "        # replace is false so that no items in the list are replaced \n",
    "        #as we want to use the five napkins only\n",
    "        rand_napkins = np.random.choice(napkins, n, replace = False)\n",
    "        # keeps track of number of napkins that match\n",
    "        match = 0\n",
    "        #this forms a loop to assign same index to both the lists \n",
    "        #(napkins and random_napkins) \n",
    "        # based on items in the list\n",
    "        for j in range(n):\n",
    "            # checks if napkins in both the lists are same\n",
    "            if napkins[j] == rand_napkins[j]:\n",
    "                match += 1\n",
    "    # no napkin matches than no_match counter increases by 1   \n",
    "        if match == 0: \n",
    "            no_match += 1\n",
    "    # prints the probabiltiy of no napkins matching\n",
    "    print(\"The probability of no napkins matching is\", \n",
    "          no_match/trials)\n",
    "#this calls in the function and gives it the input of napkins \n",
    "#and the number iterations.\n",
    "no_napkins([1,2,3,4,5,6],10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c25b87ee",
   "metadata": {},
   "source": [
    "# Expected Value\n",
    "\n",
    "What is the expected number of napkins that will be correctly matched to the corresponding block? Estimate this probability using a simulation and provide a detailed interpretation of the result, along with a justification for why your work constitutes a strong application of #probability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d74425e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The expected value of matching the napkins per trial is 0.9929\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "def no_napkins(napkins, trials):\n",
    "    n = len(napkins)\n",
    "    # keeps track of the number of times the list of napkins matches\n",
    "    matches = 0\n",
    "    # makes the list of napkins random\n",
    "    for i in range(trials):\n",
    "    # choses an item randomly from the list of napkins, for n times\n",
    "    # replace attribute return the item to the original list, \n",
    "    #where the item can be chosen again\n",
    "    # replace is false so that no items in the list are replaced \n",
    "    #as we want to use the five napkins only\n",
    "        rand_napkins = np.random.choice(napkins, n, replace = False)\n",
    "        #this forms a loop to assign same index to both the lists \n",
    "        #(napkins and random_napkins) \n",
    "        # based on items in the list\n",
    "        for j in range(n):\n",
    "            if napkins[j] == rand_napkins[j]:\n",
    "                #if no match is found the match the counter increases by 1\n",
    "                matches += 1\n",
    "    # prints the probabiltiy of the expected value of napkins matching\n",
    "    print(\"The expected value of matching the napkins per trial is\", \n",
    "          matches/trials)\n",
    "#this calls in the function and gives it the input of napkins \n",
    "#and the number iterations.\n",
    "no_napkins([1,2,3,4,5,6],10000)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
